/*Given a string s, return the number of unique palindromes of length three that are a subsequence of s.

Note that even if there are multiple ways to obtain the same subsequence, it is still only counted once.

A palindrome is a string that reads the same forwards and backwards.

A subsequence of a string is a new string generated from the original string with some characters (can be none) deleted without changing the relative order of the remaining characters.

For example, "ace" is a subsequence of "abcde".*/

******************************************************************************************************************************************************************************************************************

1.

------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

class Solution {
public:
    int countPalindromicSubsequence(string s) {
        int n = s.length();

        unordered_set<char> letters;  // not store repeated letters.
        for(int i = 0; i < n; i++) {
            letters.insert(s[i]);
        }

        int result = 0;

        for(char letter : letters) {
            int left_idx = -1;
            int right_idx = -1;

            for(int i = 0; i < n; i++) {
                if(s[i] == letter) {
                    if(left_idx == -1) {
                        left_idx = i;
                    }

                    right_idx = i;
                }
            }

            unordered_set<char> st;
            for(int middle = left_idx+1; middle <= right_idx-1; middle++) {
                st.insert(s[middle]);
            }

            result += st.size();
        }

        return result;
    }
};

------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

2.

------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

class Solution {
public:
    int countPalindromicSubsequence(string s) {
        int n = s.length();

        vector<pair<int, int>> indices(26, {-1, -1});

        for(int i = 0; i < n; i++) {
            char ch = s[i];
            int idx = ch - 'a'; //a = 0, b = 1, ...

            if(indices[idx].first == -1) {
                indices[idx].first = i;
            }

            indices[idx].second = i;
        }

        int result = 0;

        for(int i = 0; i < 26; i++) {
            // i = 0 ---> 'a'

            int left_idx = indices[i].first;
            int right_idx = indices[i].second;
           
            unordered_set<char> st;
            for(int middle = left_idx+1; middle <= right_idx-1; middle++) {
                st.insert(s[middle]);
            }

            result += st.size();
        }

        return result;
    }
};
